//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: messages.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Org_Harshit_Messenger_Chat_ChatServiceClient`, then call methods of this protocol to make API calls.
internal protocol Org_Harshit_Messenger_Chat_ChatServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Org_Harshit_Messenger_Chat_ChatServiceClientInterceptorFactoryProtocol? { get }

  func sendMessage(
    _ request: Org_Harshit_Messenger_Chat_ChatMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<Org_Harshit_Messenger_Chat_ChatMessage, Org_Harshit_Messenger_Chat_ChatMessageResponse>

  func streamMessage(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Org_Harshit_Messenger_Chat_ChatMessage, Org_Harshit_Messenger_Chat_ChatMessageResponse>

  func sendMessagesGRPC(
    callOptions: CallOptions?,
    handler: @escaping (Org_Harshit_Messenger_Chat_ChatMessage) -> Void
  ) -> BidirectionalStreamingCall<Org_Harshit_Messenger_Chat_ChatMessage, Org_Harshit_Messenger_Chat_ChatMessage>
}

extension Org_Harshit_Messenger_Chat_ChatServiceClientProtocol {
  internal var serviceName: String {
    return "org.harshit.messenger.chat.ChatService"
  }

  /// Unary call to SendMessage
  ///
  /// - Parameters:
  ///   - request: Request to send to SendMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendMessage(
    _ request: Org_Harshit_Messenger_Chat_ChatMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Org_Harshit_Messenger_Chat_ChatMessage, Org_Harshit_Messenger_Chat_ChatMessageResponse> {
    return self.makeUnaryCall(
      path: Org_Harshit_Messenger_Chat_ChatServiceClientMetadata.Methods.sendMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }

  /// Client streaming call to StreamMessage
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func streamMessage(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Org_Harshit_Messenger_Chat_ChatMessage, Org_Harshit_Messenger_Chat_ChatMessageResponse> {
    return self.makeClientStreamingCall(
      path: Org_Harshit_Messenger_Chat_ChatServiceClientMetadata.Methods.streamMessage.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamMessageInterceptors() ?? []
    )
  }

  /// Bidirectional streaming call to SendMessagesGRPC
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func sendMessagesGRPC(
    callOptions: CallOptions? = nil,
    handler: @escaping (Org_Harshit_Messenger_Chat_ChatMessage) -> Void
  ) -> BidirectionalStreamingCall<Org_Harshit_Messenger_Chat_ChatMessage, Org_Harshit_Messenger_Chat_ChatMessage> {
    return self.makeBidirectionalStreamingCall(
      path: Org_Harshit_Messenger_Chat_ChatServiceClientMetadata.Methods.sendMessagesGRPC.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessagesGRPCInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Org_Harshit_Messenger_Chat_ChatServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Org_Harshit_Messenger_Chat_ChatServiceNIOClient")
internal final class Org_Harshit_Messenger_Chat_ChatServiceClient: Org_Harshit_Messenger_Chat_ChatServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Org_Harshit_Messenger_Chat_ChatServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Org_Harshit_Messenger_Chat_ChatServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the org.harshit.messenger.chat.ChatService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Org_Harshit_Messenger_Chat_ChatServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Org_Harshit_Messenger_Chat_ChatServiceNIOClient: Org_Harshit_Messenger_Chat_ChatServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Org_Harshit_Messenger_Chat_ChatServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the org.harshit.messenger.chat.ChatService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Org_Harshit_Messenger_Chat_ChatServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Org_Harshit_Messenger_Chat_ChatServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Org_Harshit_Messenger_Chat_ChatServiceClientInterceptorFactoryProtocol? { get }

  func makeSendMessageCall(
    _ request: Org_Harshit_Messenger_Chat_ChatMessage,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Org_Harshit_Messenger_Chat_ChatMessage, Org_Harshit_Messenger_Chat_ChatMessageResponse>

  func makeStreamMessageCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<Org_Harshit_Messenger_Chat_ChatMessage, Org_Harshit_Messenger_Chat_ChatMessageResponse>

  func makeSendMessagesGrpcCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Org_Harshit_Messenger_Chat_ChatMessage, Org_Harshit_Messenger_Chat_ChatMessage>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Org_Harshit_Messenger_Chat_ChatServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Org_Harshit_Messenger_Chat_ChatServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Org_Harshit_Messenger_Chat_ChatServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSendMessageCall(
    _ request: Org_Harshit_Messenger_Chat_ChatMessage,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Org_Harshit_Messenger_Chat_ChatMessage, Org_Harshit_Messenger_Chat_ChatMessageResponse> {
    return self.makeAsyncUnaryCall(
      path: Org_Harshit_Messenger_Chat_ChatServiceClientMetadata.Methods.sendMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }

  internal func makeStreamMessageCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<Org_Harshit_Messenger_Chat_ChatMessage, Org_Harshit_Messenger_Chat_ChatMessageResponse> {
    return self.makeAsyncClientStreamingCall(
      path: Org_Harshit_Messenger_Chat_ChatServiceClientMetadata.Methods.streamMessage.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamMessageInterceptors() ?? []
    )
  }

  internal func makeSendMessagesGrpcCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Org_Harshit_Messenger_Chat_ChatMessage, Org_Harshit_Messenger_Chat_ChatMessage> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Org_Harshit_Messenger_Chat_ChatServiceClientMetadata.Methods.sendMessagesGRPC.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessagesGRPCInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Org_Harshit_Messenger_Chat_ChatServiceAsyncClientProtocol {
  internal func sendMessage(
    _ request: Org_Harshit_Messenger_Chat_ChatMessage,
    callOptions: CallOptions? = nil
  ) async throws -> Org_Harshit_Messenger_Chat_ChatMessageResponse {
    return try await self.performAsyncUnaryCall(
      path: Org_Harshit_Messenger_Chat_ChatServiceClientMetadata.Methods.sendMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }

  internal func streamMessage<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Org_Harshit_Messenger_Chat_ChatMessageResponse where RequestStream: Sequence, RequestStream.Element == Org_Harshit_Messenger_Chat_ChatMessage {
    return try await self.performAsyncClientStreamingCall(
      path: Org_Harshit_Messenger_Chat_ChatServiceClientMetadata.Methods.streamMessage.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamMessageInterceptors() ?? []
    )
  }

  internal func streamMessage<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Org_Harshit_Messenger_Chat_ChatMessageResponse where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Org_Harshit_Messenger_Chat_ChatMessage {
    return try await self.performAsyncClientStreamingCall(
      path: Org_Harshit_Messenger_Chat_ChatServiceClientMetadata.Methods.streamMessage.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamMessageInterceptors() ?? []
    )
  }

  internal func sendMessagesGRPC<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Org_Harshit_Messenger_Chat_ChatMessage> where RequestStream: Sequence, RequestStream.Element == Org_Harshit_Messenger_Chat_ChatMessage {
    return self.performAsyncBidirectionalStreamingCall(
      path: Org_Harshit_Messenger_Chat_ChatServiceClientMetadata.Methods.sendMessagesGRPC.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessagesGRPCInterceptors() ?? []
    )
  }

  internal func sendMessagesGRPC<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Org_Harshit_Messenger_Chat_ChatMessage> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Org_Harshit_Messenger_Chat_ChatMessage {
    return self.performAsyncBidirectionalStreamingCall(
      path: Org_Harshit_Messenger_Chat_ChatServiceClientMetadata.Methods.sendMessagesGRPC.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessagesGRPCInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Org_Harshit_Messenger_Chat_ChatServiceAsyncClient: Org_Harshit_Messenger_Chat_ChatServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Org_Harshit_Messenger_Chat_ChatServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Org_Harshit_Messenger_Chat_ChatServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Org_Harshit_Messenger_Chat_ChatServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'sendMessage'.
  func makeSendMessageInterceptors() -> [ClientInterceptor<Org_Harshit_Messenger_Chat_ChatMessage, Org_Harshit_Messenger_Chat_ChatMessageResponse>]

  /// - Returns: Interceptors to use when invoking 'streamMessage'.
  func makeStreamMessageInterceptors() -> [ClientInterceptor<Org_Harshit_Messenger_Chat_ChatMessage, Org_Harshit_Messenger_Chat_ChatMessageResponse>]

  /// - Returns: Interceptors to use when invoking 'sendMessagesGRPC'.
  func makeSendMessagesGRPCInterceptors() -> [ClientInterceptor<Org_Harshit_Messenger_Chat_ChatMessage, Org_Harshit_Messenger_Chat_ChatMessage>]
}

internal enum Org_Harshit_Messenger_Chat_ChatServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ChatService",
    fullName: "org.harshit.messenger.chat.ChatService",
    methods: [
      Org_Harshit_Messenger_Chat_ChatServiceClientMetadata.Methods.sendMessage,
      Org_Harshit_Messenger_Chat_ChatServiceClientMetadata.Methods.streamMessage,
      Org_Harshit_Messenger_Chat_ChatServiceClientMetadata.Methods.sendMessagesGRPC,
    ]
  )

  internal enum Methods {
    internal static let sendMessage = GRPCMethodDescriptor(
      name: "SendMessage",
      path: "/org.harshit.messenger.chat.ChatService/SendMessage",
      type: GRPCCallType.unary
    )

    internal static let streamMessage = GRPCMethodDescriptor(
      name: "StreamMessage",
      path: "/org.harshit.messenger.chat.ChatService/StreamMessage",
      type: GRPCCallType.clientStreaming
    )

    internal static let sendMessagesGRPC = GRPCMethodDescriptor(
      name: "SendMessagesGRPC",
      path: "/org.harshit.messenger.chat.ChatService/SendMessagesGRPC",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Org_Harshit_Messenger_Chat_ChatServiceProvider: CallHandlerProvider {
  var interceptors: Org_Harshit_Messenger_Chat_ChatServiceServerInterceptorFactoryProtocol? { get }

  func sendMessage(request: Org_Harshit_Messenger_Chat_ChatMessage, context: StatusOnlyCallContext) -> EventLoopFuture<Org_Harshit_Messenger_Chat_ChatMessageResponse>

  func streamMessage(context: UnaryResponseCallContext<Org_Harshit_Messenger_Chat_ChatMessageResponse>) -> EventLoopFuture<(StreamEvent<Org_Harshit_Messenger_Chat_ChatMessage>) -> Void>

  func sendMessagesGRPC(context: StreamingResponseCallContext<Org_Harshit_Messenger_Chat_ChatMessage>) -> EventLoopFuture<(StreamEvent<Org_Harshit_Messenger_Chat_ChatMessage>) -> Void>
}

extension Org_Harshit_Messenger_Chat_ChatServiceProvider {
  internal var serviceName: Substring {
    return Org_Harshit_Messenger_Chat_ChatServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SendMessage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Org_Harshit_Messenger_Chat_ChatMessage>(),
        responseSerializer: ProtobufSerializer<Org_Harshit_Messenger_Chat_ChatMessageResponse>(),
        interceptors: self.interceptors?.makeSendMessageInterceptors() ?? [],
        userFunction: self.sendMessage(request:context:)
      )

    case "StreamMessage":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Org_Harshit_Messenger_Chat_ChatMessage>(),
        responseSerializer: ProtobufSerializer<Org_Harshit_Messenger_Chat_ChatMessageResponse>(),
        interceptors: self.interceptors?.makeStreamMessageInterceptors() ?? [],
        observerFactory: self.streamMessage(context:)
      )

    case "SendMessagesGRPC":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Org_Harshit_Messenger_Chat_ChatMessage>(),
        responseSerializer: ProtobufSerializer<Org_Harshit_Messenger_Chat_ChatMessage>(),
        interceptors: self.interceptors?.makeSendMessagesGRPCInterceptors() ?? [],
        observerFactory: self.sendMessagesGRPC(context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Org_Harshit_Messenger_Chat_ChatServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Org_Harshit_Messenger_Chat_ChatServiceServerInterceptorFactoryProtocol? { get }

  func sendMessage(
    request: Org_Harshit_Messenger_Chat_ChatMessage,
    context: GRPCAsyncServerCallContext
  ) async throws -> Org_Harshit_Messenger_Chat_ChatMessageResponse

  func streamMessage(
    requestStream: GRPCAsyncRequestStream<Org_Harshit_Messenger_Chat_ChatMessage>,
    context: GRPCAsyncServerCallContext
  ) async throws -> Org_Harshit_Messenger_Chat_ChatMessageResponse

  func sendMessagesGRPC(
    requestStream: GRPCAsyncRequestStream<Org_Harshit_Messenger_Chat_ChatMessage>,
    responseStream: GRPCAsyncResponseStreamWriter<Org_Harshit_Messenger_Chat_ChatMessage>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Org_Harshit_Messenger_Chat_ChatServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Org_Harshit_Messenger_Chat_ChatServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Org_Harshit_Messenger_Chat_ChatServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Org_Harshit_Messenger_Chat_ChatServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SendMessage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Org_Harshit_Messenger_Chat_ChatMessage>(),
        responseSerializer: ProtobufSerializer<Org_Harshit_Messenger_Chat_ChatMessageResponse>(),
        interceptors: self.interceptors?.makeSendMessageInterceptors() ?? [],
        wrapping: { try await self.sendMessage(request: $0, context: $1) }
      )

    case "StreamMessage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Org_Harshit_Messenger_Chat_ChatMessage>(),
        responseSerializer: ProtobufSerializer<Org_Harshit_Messenger_Chat_ChatMessageResponse>(),
        interceptors: self.interceptors?.makeStreamMessageInterceptors() ?? [],
        wrapping: { try await self.streamMessage(requestStream: $0, context: $1) }
      )

    case "SendMessagesGRPC":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Org_Harshit_Messenger_Chat_ChatMessage>(),
        responseSerializer: ProtobufSerializer<Org_Harshit_Messenger_Chat_ChatMessage>(),
        interceptors: self.interceptors?.makeSendMessagesGRPCInterceptors() ?? [],
        wrapping: { try await self.sendMessagesGRPC(requestStream: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

internal protocol Org_Harshit_Messenger_Chat_ChatServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'sendMessage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendMessageInterceptors() -> [ServerInterceptor<Org_Harshit_Messenger_Chat_ChatMessage, Org_Harshit_Messenger_Chat_ChatMessageResponse>]

  /// - Returns: Interceptors to use when handling 'streamMessage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStreamMessageInterceptors() -> [ServerInterceptor<Org_Harshit_Messenger_Chat_ChatMessage, Org_Harshit_Messenger_Chat_ChatMessageResponse>]

  /// - Returns: Interceptors to use when handling 'sendMessagesGRPC'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendMessagesGRPCInterceptors() -> [ServerInterceptor<Org_Harshit_Messenger_Chat_ChatMessage, Org_Harshit_Messenger_Chat_ChatMessage>]
}

internal enum Org_Harshit_Messenger_Chat_ChatServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ChatService",
    fullName: "org.harshit.messenger.chat.ChatService",
    methods: [
      Org_Harshit_Messenger_Chat_ChatServiceServerMetadata.Methods.sendMessage,
      Org_Harshit_Messenger_Chat_ChatServiceServerMetadata.Methods.streamMessage,
      Org_Harshit_Messenger_Chat_ChatServiceServerMetadata.Methods.sendMessagesGRPC,
    ]
  )

  internal enum Methods {
    internal static let sendMessage = GRPCMethodDescriptor(
      name: "SendMessage",
      path: "/org.harshit.messenger.chat.ChatService/SendMessage",
      type: GRPCCallType.unary
    )

    internal static let streamMessage = GRPCMethodDescriptor(
      name: "StreamMessage",
      path: "/org.harshit.messenger.chat.ChatService/StreamMessage",
      type: GRPCCallType.clientStreaming
    )

    internal static let sendMessagesGRPC = GRPCMethodDescriptor(
      name: "SendMessagesGRPC",
      path: "/org.harshit.messenger.chat.ChatService/SendMessagesGRPC",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}
